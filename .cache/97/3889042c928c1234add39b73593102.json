{"id":"../node_modules/@react-dnd/invariant/dist/invariant.esm.js","dependencies":[{"name":"/home/nessi/Documents/OpenSource/Meraki/fingerpaint/node_modules/@react-dnd/invariant/dist/invariant.esm.js.map","includedInParent":true,"mtime":1637738791344},{"name":"/home/nessi/Documents/OpenSource/Meraki/fingerpaint/package.json","includedInParent":true,"mtime":1637783978875},{"name":"/home/nessi/Documents/OpenSource/Meraki/fingerpaint/node_modules/@react-dnd/invariant/package.json","includedInParent":true,"mtime":1637738791344}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invariant = invariant;\n\n/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (\"development\" !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"../src/index.ts","name":"invariant","original":{"line":12,"column":16},"generated":{"line":18,"column":9}},{"source":"../src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":18}},{"source":"../src/index.ts","name":"condition","original":{"line":12,"column":26},"generated":{"line":18,"column":19}},{"source":"../src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":28}},{"source":"../src/index.ts","name":"format","original":{"line":12,"column":42},"generated":{"line":18,"column":30}},{"source":"../src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":36}},{"source":"../src/index.ts","name":"format","original":{"line":12,"column":42},"generated":{"line":18,"column":38}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":36}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":40}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":43}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":47}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":52}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":53}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":57}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":60}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":61}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":64}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":68}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":71}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":72}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":75}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":76}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":79}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":83}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":86}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":89}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":93}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":96}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":102}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":106}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":19,"column":110}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":0}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":4}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":8}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":9}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":13}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":16}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":17}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":18}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":21}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":30}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":31}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":35}},{"source":"../src/index.ts","name":"args","original":{"line":12,"column":61},"generated":{"line":20,"column":36}},{"source":"../src/index.ts","name":"process","original":{"line":13,"column":6},"generated":{"line":23,"column":6}},{"source":"../src/index.ts","name":null,"original":{"line":13,"column":31},"generated":{"line":23,"column":24}},{"source":"../src/index.ts","name":null,"original":{"line":13,"column":45},"generated":{"line":23,"column":38}},{"source":"../src/index.ts","name":"format","original":{"line":14,"column":8},"generated":{"line":24,"column":8}},{"source":"../src/index.ts","name":null,"original":{"line":14,"column":14},"generated":{"line":24,"column":14}},{"source":"../src/index.ts","name":"undefined","original":{"line":14,"column":19},"generated":{"line":24,"column":19}},{"source":"../src/index.ts","name":null,"original":{"line":14,"column":30},"generated":{"line":24,"column":30}},{"source":"../src/index.ts","name":null,"original":{"line":15,"column":12},"generated":{"line":25,"column":12}},{"source":"../src/index.ts","name":"Error","original":{"line":15,"column":16},"generated":{"line":25,"column":16}},{"source":"../src/index.ts","name":null,"original":{"line":15,"column":12},"generated":{"line":25,"column":21}},{"source":"../src/index.ts","name":null,"original":{"line":15,"column":22},"generated":{"line":25,"column":22}},{"source":"../src/index.ts","name":null,"original":{"line":15,"column":12},"generated":{"line":25,"column":68}},{"source":"../src/index.ts","name":null,"original":{"line":19,"column":6},"generated":{"line":29,"column":6}},{"source":"../src/index.ts","name":"condition","original":{"line":19,"column":7},"generated":{"line":29,"column":7}},{"source":"../src/index.ts","name":null,"original":{"line":19,"column":18},"generated":{"line":29,"column":18}},{"source":"../src/index.ts","name":"error","original":{"line":20,"column":8},"generated":{"line":30,"column":8}},{"source":"../src/index.ts","name":"format","original":{"line":21,"column":8},"generated":{"line":32,"column":8}},{"source":"../src/index.ts","name":null,"original":{"line":21,"column":14},"generated":{"line":32,"column":14}},{"source":"../src/index.ts","name":"undefined","original":{"line":21,"column":19},"generated":{"line":32,"column":19}},{"source":"../src/index.ts","name":null,"original":{"line":21,"column":30},"generated":{"line":32,"column":30}},{"source":"../src/index.ts","name":"error","original":{"line":22,"column":6},"generated":{"line":33,"column":0}},{"source":"../src/index.ts","name":"error","original":{"line":22,"column":6},"generated":{"line":33,"column":6}},{"source":"../src/index.ts","name":null,"original":{"line":22,"column":11},"generated":{"line":33,"column":11}},{"source":"../src/index.ts","name":null,"original":{"line":22,"column":14},"generated":{"line":33,"column":14}},{"source":"../src/index.ts","name":"Error","original":{"line":22,"column":18},"generated":{"line":33,"column":18}},{"source":"../src/index.ts","name":null,"original":{"line":22,"column":14},"generated":{"line":33,"column":23}},{"source":"../src/index.ts","name":null,"original":{"line":23,"column":8},"generated":{"line":33,"column":24}},{"source":"../src/index.ts","name":null,"original":{"line":24,"column":10},"generated":{"line":33,"column":95}},{"source":"../src/index.ts","name":null,"original":{"line":22,"column":14},"generated":{"line":33,"column":156}},{"source":"../src/index.ts","name":"error","original":{"line":22,"column":6},"generated":{"line":33,"column":157}},{"source":"../src/index.ts","name":null,"original":{"line":21,"column":4},"generated":{"line":34,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":26,"column":11},"generated":{"line":34,"column":11}},{"source":"../src/index.ts","name":"argIndex","original":{"line":27,"column":10},"generated":{"line":35,"column":10}},{"source":"../src/index.ts","name":null,"original":{"line":27,"column":18},"generated":{"line":35,"column":18}},{"source":"../src/index.ts","name":null,"original":{"line":27,"column":21},"generated":{"line":35,"column":21}},{"source":"../src/index.ts","name":"error","original":{"line":28,"column":6},"generated":{"line":36,"column":0}},{"source":"../src/index.ts","name":"error","original":{"line":28,"column":6},"generated":{"line":36,"column":6}},{"source":"../src/index.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":36,"column":11}},{"source":"../src/index.ts","name":null,"original":{"line":28,"column":14},"generated":{"line":36,"column":14}},{"source":"../src/index.ts","name":"Error","original":{"line":28,"column":18},"generated":{"line":36,"column":18}},{"source":"../src/index.ts","name":null,"original":{"line":28,"column":14},"generated":{"line":36,"column":23}},{"source":"../src/index.ts","name":"format","original":{"line":29,"column":8},"generated":{"line":36,"column":24}},{"source":"../src/index.ts","name":null,"original":{"line":29,"column":14},"generated":{"line":36,"column":30}},{"source":"../src/index.ts","name":"replace","original":{"line":29,"column":15},"generated":{"line":36,"column":31}},{"source":"../src/index.ts","name":"format","original":{"line":29,"column":8},"generated":{"line":36,"column":38}},{"source":"../src/index.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":36,"column":39}},{"source":"../src/index.ts","name":"format","original":{"line":29,"column":8},"generated":{"line":36,"column":44}},{"source":"../src/index.ts","name":null,"original":{"line":29,"column":30},"generated":{"line":36,"column":46}},{"source":"../src/index.ts","name":null,"original":{"line":29,"column":30},"generated":{"line":36,"column":58}},{"source":"../src/index.ts","name":"args","original":{"line":30,"column":17},"generated":{"line":37,"column":15}},{"source":"../src/index.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":37,"column":19}},{"source":"../src/index.ts","name":"argIndex","original":{"line":30,"column":22},"generated":{"line":37,"column":20}},{"source":"../src/index.ts","name":null,"original":{"line":30,"column":30},"generated":{"line":37,"column":28}},{"source":"../src/index.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":37,"column":30}},{"source":"../src/index.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":38,"column":0}},{"source":"../src/index.ts","name":"format","original":{"line":29,"column":8},"generated":{"line":38,"column":7}},{"source":"../src/index.ts","name":null,"original":{"line":28,"column":14},"generated":{"line":38,"column":8}},{"source":"../src/index.ts","name":"error","original":{"line":28,"column":6},"generated":{"line":38,"column":9}},{"source":"../src/index.ts","name":"error","original":{"line":33,"column":6},"generated":{"line":39,"column":0}},{"source":"../src/index.ts","name":"error","original":{"line":33,"column":6},"generated":{"line":39,"column":6}},{"source":"../src/index.ts","name":null,"original":{"line":33,"column":11},"generated":{"line":39,"column":11}},{"source":"../src/index.ts","name":"name","original":{"line":33,"column":12},"generated":{"line":39,"column":12}},{"source":"../src/index.ts","name":"error","original":{"line":33,"column":6},"generated":{"line":39,"column":16}},{"source":"../src/index.ts","name":null,"original":{"line":33,"column":19},"generated":{"line":39,"column":19}},{"source":"../src/index.ts","name":"error","original":{"line":33,"column":6},"generated":{"line":39,"column":40}},{"source":"../src/index.ts","name":"error","original":{"line":36,"column":5},"generated":{"line":42,"column":0}},{"source":"../src/index.ts","name":"error","original":{"line":36,"column":5},"generated":{"line":42,"column":4}},{"source":"../src/index.ts","name":null,"original":{"line":36,"column":18},"generated":{"line":42,"column":9}},{"source":"../src/index.ts","name":"framesToPop","original":{"line":36,"column":19},"generated":{"line":42,"column":10}},{"source":"../src/index.ts","name":"error","original":{"line":36,"column":5},"generated":{"line":42,"column":21}},{"source":"../src/index.ts","name":null,"original":{"line":36,"column":33},"generated":{"line":42,"column":24}},{"source":"../src/index.ts","name":"error","original":{"line":36,"column":5},"generated":{"line":42,"column":25}},{"source":"../src/index.ts","name":null,"original":{"line":19,"column":18},"generated":{"line":42,"column":26}},{"source":"../src/index.ts","name":null,"original":{"line":19,"column":18},"generated":{"line":42,"column":27}},{"source":"../src/index.ts","name":"error","original":{"line":37,"column":10},"generated":{"line":44,"column":10}}],"sources":{"../src/index.ts":"/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport function invariant(condition: any, format: string, ...args: any[]) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n          'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    (error as any).framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"f5b9a2e4c408b120e5fe517912701596","cacheData":{"env":{"NODE_ENV":"development"}}}